param N > 0; #number of possible programs
param K > 0; #number of after school programs we want

param avgDisC{1..N} > 0; #AVERAGE recpiricols of distance from crime
param disS{1..N} > 0; #SUM of recipricols of distance from after school programs
param numDisS{1..N} > 0; #number of after school programs considered using distance function
param innerDis{1..N, 1..N} >= 0; #distance between asp we're picking

var y{1..N} binary; #whether or not we pick school i

#Constraint function
minimize distances: 
	sum{i in 1..N} (y[i] * ( (disS[i] + sum{j in 1..N} (y[j] * innerDis[i,j]) )/(numDisS[i] + K - 1) 
	- avgDisC[i]) );
	
	
#makes sure we add the correct number of after school programs	
subject to correctNumber:
	sum{i in 1..N} y[i] = K; </nowiki>
